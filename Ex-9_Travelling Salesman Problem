from itertools import permutations

def tsp_brute_force(graph):
    # Generate all possible routes
    vertex = list(graph.keys())
    all_permutations = permutations(vertex[1:])
    
    min_path = None
    min_distance = float('inf')
    
    for perm in all_permutations:

        current_distance = 0
        current_path = ['A'] + list(perm) + ['A']
        for i in range(len(vertex)):
            current_distance += graph[current_path[i]][current_path[i+1]]
        

        if current_distance < min_distance:
            min_distance = current_distance
            min_path = current_path
    
    return min_path, min_distance

if __name__ == "__main__":

    graph = {
        'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
        'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
        'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
        'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
    }
    
    path, distance = tsp_brute_force(graph)
    print(f"Minimum path: {' -> '.join(path)}")
    print(f"Minimum distance: {distance}")
